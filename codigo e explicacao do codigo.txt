Para criar um sistema de login básico em Python usando `CustomTkinter` para a interface gráfica e `sqlite3` para gerenciar os usuários, você precisará seguir algumas etapas principais. Abaixo está um exemplo completo que cobre todos os requisitos mencionados.

### Passos:

1. **Instalação das Bibliotecas Necessárias:**
   - `CustomTkinter` pode ser instalado usando `pip install customtkinter`.
   - `bcrypt` pode ser instalado usando `pip install bcrypt` para criptografia de senhas.

2. **Código Python:**

   Aqui está o código completo que você pode usar:

   ```python
   import sqlite3
   import bcrypt
   import customtkinter as ctk
   from tkinter import messagebox

   # Função para criar o banco de dados e a tabela de usuários
   def create_db():
       conn = sqlite3.connect('users.db')
       c = conn.cursor()
       c.execute('''
           CREATE TABLE IF NOT EXISTS users (
               username TEXT PRIMARY KEY,
               password TEXT NOT NULL
           )
       ''')
       conn.commit()
       conn.close()

   # Função para registrar um novo usuário
   def register_user(username, password):
       conn = sqlite3.connect('users.db')
       c = conn.cursor()
       hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
       try:
           c.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_pw))
           conn.commit()
           messagebox.showinfo("Sucesso", "Usuário registrado com sucesso!")
       except sqlite3.IntegrityError:
           messagebox.showerror("Erro", "Nome de usuário já existe!")
       conn.close()

   # Função para autenticar o usuário
   def login_user(username, password):
       conn = sqlite3.connect('users.db')
       c = conn.cursor()
       c.execute('SELECT password FROM users WHERE username = ?', (username,))
       result = c.fetchone()
       conn.close()
       if result and bcrypt.checkpw(password.encode('utf-8'), result[0]):
           messagebox.showinfo("Sucesso", "Login bem-sucedido!")
       else:
           messagebox.showerror("Erro", "Nome de usuário ou senha incorretos!")

   # Função para exibir a tela de registro
   def show_register():
       def submit_registration():
           username = entry_username.get()
           password = entry_password.get()
           if username and password:
               register_user(username, password)
           else:
               messagebox.showwarning("Aviso", "Por favor, preencha todos os campos.")

       register_window = ctk.CTkToplevel()
       register_window.title("Registrar")

       ctk.CTkLabel(register_window, text="Nome de Usuário").pack(pady=5)
       entry_username = ctk.CTkEntry(register_window)
       entry_username.pack(pady=5)

       ctk.CTkLabel(register_window, text="Senha").pack(pady=5)
       entry_password = ctk.CTkEntry(register_window, show="*")
       entry_password.pack(pady=5)

       ctk.CTkButton(register_window, text="Registrar", command=submit_registration).pack(pady=10)

   # Função para exibir a tela de login
   def show_login():
       def submit_login():
           username = entry_username.get()
           password = entry_password.get()
           if username and password:
               login_user(username, password)
           else:
               messagebox.showwarning("Aviso", "Por favor, preencha todos os campos.")

       login_window = ctk.CTkToplevel()
       login_window.title("Login")

       ctk.CTkLabel(login_window, text="Nome de Usuário").pack(pady=5)
       entry_username = ctk.CTkEntry(login_window)
       entry_username.pack(pady=5)

       ctk.CTkLabel(login_window, text="Senha").pack(pady=5)
       entry_password = ctk.CTkEntry(login_window, show="*")
       entry_password.pack(pady=5)

       ctk.CTkButton(login_window, text="Login", command=submit_login).pack(pady=10)

   # Função principal
   def main():
       create_db()

       root = ctk.CTk()
       root.title("Sistema de Login")

       ctk.CTkButton(root, text="Registrar", command=show_register).pack(pady=10)
       ctk.CTkButton(root, text="Login", command=show_login).pack(pady=10)

       root.mainloop()

   if __name__ == "__main__":
       main()
   ```

### Explicação do Código:

1. **Banco de Dados (`create_db`, `register_user`, `login_user`)**
   - `create_db`: Cria o banco de dados e a tabela de usuários, se não existirem.
   - `register_user`: Registra um novo usuário com senha criptografada.
   - `login_user`: Verifica as credenciais do usuário para login.

2. **Interface Gráfica (`show_register`, `show_login`, `main`)**
   - `show_register`: Abre uma nova janela para registro de usuário.
   - `show_login`: Abre uma nova janela para login de usuário.
   - `main`: Inicializa a interface principal com botões para abrir as janelas de registro e login.

### Compilando o Código em um Executável:

Você pode usar ferramentas como `PyInstaller` para criar um executável a partir do seu script Python. Primeiro, instale `PyInstaller` com `pip install pyinstaller`. Em seguida, use o comando:

```bash
pyinstaller --onefile --windowed seu_script.py
```

Substitua `seu_script.py` pelo nome do seu arquivo Python. O executável será gerado na pasta `dist`.

### Notas Adicionais:

- Certifique-se de que todas as dependências (`CustomTkinter` e `bcrypt`) estão instaladas.
- O código assume que o banco de dados `users.db` está no mesmo diretório do script.
- Para uso em produção, considere usar um método mais robusto para armazenamento e gerenciamento de senhas, e adicione mais funcionalidades de segurança e validação conforme necessário.

Espero que isso ajude a construir o sistema de login desejado! Se precisar de mais detalhes, consulte a documentação das bibliotecas usadas e adapte o código conforme necessário.